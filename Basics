VAlues:

val: This can hold the result of expression in the val keyword.

val a = 1+1

val cant be reasigned.

Types of values can be inferred, but you can also explicitly state the type, like this:

val x: Int = 1 + 1

-----------------------

we define data type in scala like:

val a : Int
val a : String
val a : Any


------------------------
variables:
variables are like values, except that we can reasign the variables.

declare:
var a : Int = 10

----------------------

Blocks
You can combine expressions by surrounding them with {}. We call this a block.

The result of the last expression in the block is the result of the overall block, too.

println({
  val x = 1 + 1
  x + 1
}) // 3


------------------------

Functions
Functions are expressions that take parameters.

You can define an anonymous function (i.e. no name) that returns a given integer plus one:

(x: Int) => x + 1
On the left of => is a list of parameters. On the right is an expression involving the parameters.

You can also name functions.

val addOne = (x: Int) => x + 1
println(addOne(1)) // 2
Functions may take multiple parameters.

val add = (x: Int, y: Int) => x + y
println(add(1, 2)) // 3
Or it can take no parameters.

val getTheAnswer = () => 42
println(getTheAnswer()) // 42
We will cover functions in depth later.
-----------------------------

Methods
Methods look and behave very similar to functions, but there are a few key differences between them.

Methods are defined with the def keyword. def is followed by a name, parameter lists, a return type, and a body.

def add(x: Int, y: Int): Int = x + y
println(add(1, 2)) // 3
Notice how the return type is declared after the parameter list and a colon : Int.

Methods can take multiple parameter lists.

def addThenMultiply(x: Int, y: Int)(multiplier: Int): Int = (x + y) * multiplier
println(addThenMultiply(1, 2)(3)) // 9
Or no parameter lists at all.

def name: String = System.getProperty("name")
println("Hello, " + name + "!")
There are some other differences, but for now, you can think of them as something similar to functions.

Methods can have multi-line expressions as well.

def getSquareString(input: Double): String = {
  val square = input * input
  square.toString
}
The last expression in the body is the method’s return value. (Scala does have a return keyword, but it’s rarely used.)

